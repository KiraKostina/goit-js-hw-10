{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst inputDateTimePicker = document.getElementById(\"datetime-picker\");\nconst startBtn = document.querySelector(\"[data-start]\");\nconst clockFace = document.querySelectorAll(\".value\")\n\nlet userSelectedDate = null;\nlet intervalId = null;\nstartBtn.disabled = true;\n \nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < Date.now()) {\n      iziToast.error({\n        position: \"topRight\",\n        message: \"Please choose a date in the future\",\n      });\n      startBtn.disabled = true;\n    }\n    else { \n      startBtn.disabled = false;\n      }\n  },\n};\n\nflatpickr(inputDateTimePicker, options);\n\nstartBtn.addEventListener(\"click\", (event) => { \n  intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const difference = userSelectedDate - currentTime;\n    event.preventDefault();\n    startBtn.disabled = true;\n    inputDateTimePicker.disabled = true;\n    if (difference < 1000) {\n      startBtn.disabled = true;\n     inputDateTimePicker.disabled = false;\n      clearInterval(intervalId);\n    }\n \n\n    const timer = convertMs(difference); // конвертуємо час\n    console.log(timer);\n    clockFace[0].innerText = timer.days.toString().padStart(2, \"0\"); // відмальовуємо в інтерфейс елементів ДОМ,як значення об'єкта таймер,зводячи до стрінгу та з нулем попереду\n    clockFace[1].innerText = timer.hours.toString().padStart(2, \"0\");\n    clockFace[2].innerText = timer.minutes.toString().padStart(2, \"0\");\n    clockFace[3].innerText = timer.seconds .toString().padStart(2, \"0\");\n     }, 1000);\n})\n\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["inputDateTimePicker","startBtn","clockFace","userSelectedDate","intervalId","options","selectedDates","iziToast","flatpickr","event","currentTime","difference","timer","convertMs","ms","days","hours","minutes","seconds"],"mappings":"sGAMA,MAAMA,EAAsB,SAAS,eAAe,iBAAiB,EAC/DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAY,SAAS,iBAAiB,QAAQ,EAEpD,IAAIC,EAAmB,KACnBC,EAAa,KACjBH,EAAS,SAAW,GAEpB,MAAMI,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,KAAK,OAC1BI,EAAS,MAAM,CACb,SAAU,WACV,QAAS,oCACjB,CAAO,EACDN,EAAS,SAAW,IAGpBA,EAAS,SAAW,EAEvB,CACH,EAEAO,EAAUR,EAAqBK,CAAO,EAEtCJ,EAAS,iBAAiB,QAAUQ,GAAU,CAC5CL,EAAa,YAAY,IAAM,CAC7B,MAAMM,EAAc,KAAK,MACnBC,EAAaR,EAAmBO,EACtCD,EAAM,eAAc,EACpBR,EAAS,SAAW,GACpBD,EAAoB,SAAW,GAC3BW,EAAa,MACfV,EAAS,SAAW,GACrBD,EAAoB,SAAW,GAC9B,cAAcI,CAAU,GAI1B,MAAMQ,EAAQC,EAAUF,CAAU,EAClC,QAAQ,IAAIC,CAAK,EACjBV,EAAU,CAAC,EAAE,UAAYU,EAAM,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC9DV,EAAU,CAAC,EAAE,UAAYU,EAAM,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC/DV,EAAU,CAAC,EAAE,UAAYU,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EACjEV,EAAU,CAAC,EAAE,UAAYU,EAAM,QAAS,SAAQ,EAAG,SAAS,EAAG,GAAG,CAChE,EAAE,GAAI,CACZ,CAAC,EAGD,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}